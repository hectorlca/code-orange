tabPanel("Map",
tags$head(
includeScript("./www/analytics.js"),
tags$link(rel = "stylesheet", type = "text/css",
href = "ion.rangeSlider.skinFlat.css"),
includeScript("./www/spin.min.js"),
includeCSS("./www/styles.css")
),
leafletOutput("mymap", width="100%", height="800" ),
absolutePanel( id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 100, left = "auto", right = 20, bottom = "auto",
width = 360, height = "auto",
h2(),
p(class="intro",
strong("Orangespot"), " shows code violations in",
"Syracuse, NY. Data from",
a("SYR Neighborhood and Business Development.",
href="http://www.syrgov.net/Neighborhood_and_Business_Development.aspx",
target="_blank")),
tabsetPanel(
tabPanel("Controls",
selectInput("color", "Colour by:",
choices=list("Open/Closed", "Severity", "Time to Close")), #"Days to Comply")),
hr(class="thin"),
p("See About Tab",
a("", href="",
target="_blank"),
HTML("&bull;"), "See the code on ",
a("github", href="http://github.com/subartle/orangespot",
target="_blank"),
class="foot")
),
tabPanel("About",
p(class="topp", "Visualize code violations in the city of Syracuse",
"between 2012 and 2015 in this interactive map."
),
p("Orangespot is written in ",
a("Shiny,", href="http://shiny.rstudio.com/", target="_blank"),
"a web application framework for the R language.",
"Maps are built with ",
a("leaflet.js", href="http://leafletjs.com/", target="_blank"),
"via the",
a("R language bindings,", href="https://rstudio.github.io/leaflet/",
target="_blank"),
"and using map data from",
a("Google Maps.", href="http://www.google.com/maps",
target="_blank")
),
p("Project under development by ",
p("Susannah Bartlett & Rory Tikalsky under the guidance of Professor Jesse Lecy, Maxwell School of Citizenship and Public Affairs.",
HTML("&mdash;"),
"see the full code on ",
a("github", href="http://github.com/subartle/orangespot",
target="_blank"),
"or run locally with:"
),
pre("shiny::runGitHub('subartle/orangespot')"),
hr(class="thin")
)
# end about panel
) )
) # end of tabPanel "Map"
),
#Tab 2. Graphs
tabPanel("Graphs",
fluidPage(
fluidRow(
titlePanel( "  Syracuse Code Violation Trends, 2012-2016" ),
column( checkboxGroupInput("show_comps",
label = h3("Complaint types:"),
selected = "Bed Bugs",
choices = complaint.types
),
title="Complaints Over Time",
width=3 ),
column( dygraphOutput( "complaints" ),
width=9 )),
fluidRow(
column( checkboxGroupInput("show_vios",
label= h3("Violation types:"),
choices= violation.types),
title="Violations Over Time",
width=3 ),
column( dygraphOutput( "violations" ),
width=9 ))
)),
#Tab 3. Ownership
tabPanel("Ownership",
navbarPage("Ownership Dashboard",
tabPanel("Owner and Property Profiles",
titlePanel("Summary Tables for Owners and Properties"),
fluidRow(
column (3,
summary.drop),
column (7,
mainPanel(
DT::dataTableOutput("summaries"),
align = "left",
width = 12
)
)
)
),
tabPanel("Searchable",tweaks,
titlePanel("Ownership"),
fluidRow(
#### The Three Widgets ####
column(3,
dropdown,
use.boxes,
status.boxes),
#### The Table ####
column(6,
mainPanel(
DT::dataTableOutput("explorer"),
align = "center",
width = 12
)
)
)
)
)))
my.server <- function(input, output)
{
#static color vectors
#color vector open closed
col.vec.open.closed <- NULL
col.vec.open.closed <- ifelse( dat$Violation.Status == "Open", "orange", NA)
col.vec.open.closed <- ifelse( dat$Violation.Status == "Closed", "blanchedalmond", col.vec.open.closed  )
#color vector severity
col.vec.severity <- NULL
col.vec.severity <- ifelse( dat$Severity == "1", "thistle", NA )
col.vec.severity <- ifelse( dat$Severity == "2", "plum", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "3", "orchid", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "4", "mediumorchid", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "5", "darkorchid", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "FALSE", "whitesmoke", col.vec.severity)
#color vector time between open closed - TOC
col.vec.TOC <- NULL
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 0 & dat$TimeBetweenOC <= 60, "skyblue", NA )
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 60 & dat$TimeBetweenOC <= 123, "deepskyblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 123 & dat$TimeBetweenOC <= 186, "dodgerblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 186 & dat$TimeBetweenOC <=249, "royalblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 249 & dat$TimeBetweenOC <= 312, "navy", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 312 & dat$TimeBetweenOC <= 400, "midnightblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC == 9999, "whitesmoke", col.vec.TOC)
colvec <- reactive({
if( input$color == "Severity" )
{
return(col.vec.severity)
}
if(input$color == "Open/Closed")
{
return(col.vec.open.closed)
}
if( input$color == "Time to Close")
{
return(col.vec.TOC)
}
})
output$mymap <- renderLeaflet({
# build base map on load
syr.map <- leaflet(data=lat.lon ) %>%
addProviderTiles("CartoDB.Positron", tileOptions(minZoom=10, maxZoom=17))  %>%
setView(lng=-76.13, lat=43.03, zoom=13) %>%
setMaxBounds(lng1=-75, lat1=41, lng2=-77,  lat2=45)
syr.map <- addCircleMarkers( syr.map, lng = lat.lon$lon, lat = lat.lon$lat,
col=colvec(), popup = violation.description,
radius = .5)
})
# COMPLAINTS PLOT
output$complaints <- renderDygraph({
dat.sub <- dat.post.2012[ dat.post.2012$Complaint.Type %in% input$show_comps , ]
# Dropping months with zero complaints
ncomps <- 0
comp.checks <- as.data.frame(input$show_comps)
ncomps <- length(input$comp.checks)
# If there is no input, then set it to 1
# if(ncomps == 0) {
#  ncomps = 1
# }
# Create chart for a subset of data
complaint.sub <- tapply( dat.sub$Complaint.Type, dat.sub$month.year, length )
complaint.sub[ is.na(complaint.sub) ] <- 0
# Set maximum y limit
complaint.sub.df <- as.data.frame(complaint.sub)
max.ylim <- round_any((1.1*max(complaint.sub.df[ , 1 ] )), 10, f = ceiling)
# If there is no max y limit, then set it to 1
if(max.ylim == 0) {
max.ylim = 1
}
# Set pretty names
pretty.names <- format( as.Date(names(complaint.sub)), "%b-%Y" )
month.labels <- format( as.Date(names(complaint.sub)), "%b" )
# If month has no complaints, then that month's label is null
month.labels[ complaint.sub == 0 ] <- ""
#xrange <- 0
#yrange <- c(0:1)
# Plot Complaints
dygraph(complaint.sub) %>%
dyRangeSelector()
})
# VIOLATIONS PLOT
output$violations <- renderDygraph({
vdat.sub <- dat.post.2012[ dat.post.2012$Code %in% input$show_vios , ]
nvios <- 0
vio.checks <- as.data.frame(input$show_vios)
nvios <- length(input$vio.checks)
# Create chart for a subset of data
violation.sub <- tapply( vdat.sub$Code, vdat.sub$m.year, length )
violation.sub[ is.na(violation.sub) ] <- 0
# Set maximum y limit
violation.sub.df <- as.data.frame(violation.sub)
max.ylim <- round_any((1.1*max(violation.sub.df[ , 1 ] )), 10, f = ceiling)
# If there is no max y limit, then set it to 1
if(max.ylim == 0) {
max.ylim = 1
}
# Set pretty names
vpretty.names <- format( as.Date(names(violation.sub)), "%b-%Y" )
vmonth.labels <- format( as.Date(names(violation.sub)), "%b" )
# If month has no violations, then that month's label is null
vmonth.labels[ violation.sub == 0 ] <- ""
# Plot Violations
dygraph(violation.sub) %>%
dyRangeSelector()
})
output$explorer <- DT::renderDataTable(DT::datatable({
data <- explorer
if (input$status != "All") {
data <- data[data$Violation.Status == input$status,]
}
if (input$use != "All") {
data <- data[data$LandUse == input$use,]
}
if (input$complaint != "All") {
data <- data[data$Complaint.Status == input$complaint,]
}
data
}))
output$summaries <- DT::renderDataTable(DT::datatable({
data <- explorer
if (input$category == "owner") {
data <- mashed
}
if (input$category == "property") {
data <- prop.mash
}
data
}))
}
shinyApp(ui=my.ui, server=my.server)
m.year <- cut( vio.date, breaks="month" )
m.y.name <- format( vio.date, "%b-%Y" )
# table( dat$Complaint.Type, month.year )
dat.v$m.year <- m.year
dat.post.2012$m.year <- m.year
my.server <- function(input, output)
{
#static color vectors
#color vector open closed
col.vec.open.closed <- NULL
col.vec.open.closed <- ifelse( dat$Violation.Status == "Open", "orange", NA)
col.vec.open.closed <- ifelse( dat$Violation.Status == "Closed", "blanchedalmond", col.vec.open.closed  )
#color vector severity
col.vec.severity <- NULL
col.vec.severity <- ifelse( dat$Severity == "1", "thistle", NA )
col.vec.severity <- ifelse( dat$Severity == "2", "plum", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "3", "orchid", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "4", "mediumorchid", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "5", "darkorchid", col.vec.severity)
col.vec.severity <- ifelse( dat$Severity == "FALSE", "whitesmoke", col.vec.severity)
#color vector time between open closed - TOC
col.vec.TOC <- NULL
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 0 & dat$TimeBetweenOC <= 60, "skyblue", NA )
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 60 & dat$TimeBetweenOC <= 123, "deepskyblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 123 & dat$TimeBetweenOC <= 186, "dodgerblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 186 & dat$TimeBetweenOC <=249, "royalblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 249 & dat$TimeBetweenOC <= 312, "navy", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC >= 312 & dat$TimeBetweenOC <= 400, "midnightblue", col.vec.TOC)
col.vec.TOC <- ifelse( dat$TimeBetweenOC == 9999, "whitesmoke", col.vec.TOC)
colvec <- reactive({
if( input$color == "Severity" )
{
return(col.vec.severity)
}
if(input$color == "Open/Closed")
{
return(col.vec.open.closed)
}
if( input$color == "Time to Close")
{
return(col.vec.TOC)
}
})
output$mymap <- renderLeaflet({
# build base map on load
syr.map <- leaflet(data=lat.lon ) %>%
addProviderTiles("CartoDB.Positron", tileOptions(minZoom=10, maxZoom=17))  %>%
setView(lng=-76.13, lat=43.03, zoom=13) %>%
setMaxBounds(lng1=-75, lat1=41, lng2=-77,  lat2=45)
syr.map <- addCircleMarkers( syr.map, lng = lat.lon$lon, lat = lat.lon$lat,
col=colvec(), popup = violation.description,
radius = .5)
})
# COMPLAINTS PLOT
output$complaints <- renderDygraph({
dat.sub <- dat.post.2012[ dat.post.2012$Complaint.Type %in% input$show_comps , ]
# Dropping months with zero complaints
ncomps <- 0
comp.checks <- as.data.frame(input$show_comps)
ncomps <- length(input$comp.checks)
# If there is no input, then set it to 1
# if(ncomps == 0) {
#  ncomps = 1
# }
# Create chart for a subset of data
complaint.sub <- tapply( dat.sub$Complaint.Type, dat.sub$month.year, length )
complaint.sub[ is.na(complaint.sub) ] <- 0
# Set maximum y limit
complaint.sub.df <- as.data.frame(complaint.sub)
max.ylim <- round_any((1.1*max(complaint.sub.df[ , 1 ] )), 10, f = ceiling)
# If there is no max y limit, then set it to 1
if(max.ylim == 0) {
max.ylim = 1
}
# Set pretty names
pretty.names <- format( as.Date(names(complaint.sub)), "%b-%Y" )
month.labels <- format( as.Date(names(complaint.sub)), "%b" )
# If month has no complaints, then that month's label is null
month.labels[ complaint.sub == 0 ] <- ""
#xrange <- 0
#yrange <- c(0:1)
# Plot Complaints
dygraph(complaint.sub) %>%
dyRangeSelector()
})
# VIOLATIONS PLOT
output$violations <- renderDygraph({
vdat.sub <- dat.post.2012[ dat.post.2012$Code %in% input$show_vios , ]
nvios <- 0
vio.checks <- as.data.frame(input$show_vios)
nvios <- length(input$vio.checks)
# Create chart for a subset of data
violation.sub <- tapply( vdat.sub$Code, vdat.sub$m.year, length )
violation.sub[ is.na(violation.sub) ] <- 0
# Set maximum y limit
violation.sub.df <- as.data.frame(violation.sub)
max.ylim <- round_any((1.1*max(violation.sub.df[ , 1 ] )), 10, f = ceiling)
# If there is no max y limit, then set it to 1
if(max.ylim == 0) {
max.ylim = 1
}
# Set pretty names
vpretty.names <- format( as.Date(names(violation.sub)), "%b-%Y" )
vmonth.labels <- format( as.Date(names(violation.sub)), "%b" )
# If month has no violations, then that month's label is null
vmonth.labels[ violation.sub == 0 ] <- ""
# Plot Violations
dygraph(violation.sub) %>%
dyRangeSelector()
})
output$explorer <- DT::renderDataTable(DT::datatable({
data <- explorer
if (input$status != "All") {
data <- data[data$Violation.Status == input$status,]
}
if (input$use != "All") {
data <- data[data$LandUse == input$use,]
}
if (input$complaint != "All") {
data <- data[data$Complaint.Status == input$complaint,]
}
data
}))
output$summaries <- DT::renderDataTable(DT::datatable({
data <- explorer
if (input$category == "owner") {
data <- mashed
}
if (input$category == "property") {
data <- prop.mash
}
data
}))
}
shinyApp(ui=my.ui, server=my.server)
my.ui <- navbarPage("Orangespot", id="nav", collapsible=T,
#Tab 1. MAP
tabPanel("Map",
tags$head(
includeScript("./www/analytics.js"),
tags$link(rel = "stylesheet", type = "text/css",
href = "ion.rangeSlider.skinFlat.css"),
includeScript("./www/spin.min.js"),
includeCSS("./www/styles.css")
),
leafletOutput("mymap", width="100%", height="800" ),
absolutePanel( id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 100, left = "auto", right = 20, bottom = "auto",
width = 360, height = "auto",
h2(),
p(class="intro",
strong("Orangespot"), " shows code violations in",
"Syracuse, NY. Data from",
a("SYR Neighborhood and Business Development.",
href="http://www.syrgov.net/Neighborhood_and_Business_Development.aspx",
target="_blank")),
tabsetPanel(
tabPanel("Controls",
selectInput("color", "Colour by:",
choices=list("Open/Closed", "Severity", "Time to Close")), #"Days to Comply")),
hr(class="thin"),
p("See About Tab",
a("", href="",
target="_blank"),
HTML("&bull;"), "See the code on ",
a("github", href="http://github.com/subartle/orangespot",
target="_blank"),
class="foot")
),
tabPanel("About",
p(class="topp", "Visualize code violations in the city of Syracuse",
"between 2012 and 2015 in this interactive map."
),
p("Orangespot is written in ",
a("Shiny,", href="http://shiny.rstudio.com/", target="_blank"),
"a web application framework for the R language.",
"Maps are built with ",
a("leaflet.js", href="http://leafletjs.com/", target="_blank"),
"via the",
a("R language bindings,", href="https://rstudio.github.io/leaflet/",
target="_blank"),
"and using map data from",
a("Google Maps.", href="http://www.google.com/maps",
target="_blank")
),
p("Project under development by ",
p("Susannah Bartlett & Rory Tikalsky under the guidance of Professor Jesse Lecy, Maxwell School of Citizenship and Public Affairs.",
HTML("&mdash;"),
"see the full code on ",
a("github", href="http://github.com/subartle/orangespot",
target="_blank"),
"or run locally with:"
),
pre("shiny::runGitHub('subartle/orangespot')"),
hr(class="thin")
)
# end about panel
) )
) # end of tabPanel "Map"
),
#Tab 2. Graphs
tabPanel("Graphs",
fluidPage(
fluidRow(
titlePanel( "  Syracuse Code Violation Trends, 2012-2016" ),
column( checkboxGroupInput("show_comps",
label = h3("Complaint types:"),
selected = "Bed Bugs",
choices = complaint.types
),
title="Complaints Over Time",
width=3 ),
column( dygraphOutput( "complaints" ),
width=9 )),
fluidRow(
column( checkboxGroupInput("show_vios",
label= h3("Violation types:"),
selected = "Section 308.1 - Infestation",
choices= violation.types),
title="Violations Over Time",
width=3 ),
column( dygraphOutput( "violations" ),
width=9 ))
)),
#Tab 3. Ownership
tabPanel("Ownership",
navbarPage("Ownership Dashboard",
tabPanel("Owner and Property Profiles",
titlePanel("Summary Tables for Owners and Properties"),
fluidRow(
column (3,
summary.drop),
column (7,
mainPanel(
DT::dataTableOutput("summaries"),
align = "left",
width = 12
)
)
)
),
tabPanel("Searchable",tweaks,
fluidRow(
#### The Three Widgets ####
column(3,
dropdown,
use.boxes,
status.boxes),
#### The Table ####
column(6,
mainPanel(
DT::dataTableOutput("explorer"),
align = "center",
width = 12
)
)
)
)
)))
shinyApp(ui=my.ui, server=my.server)
